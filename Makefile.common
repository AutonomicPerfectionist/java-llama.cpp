ifndef JAVA_HOME
$(warning Set JAVA_HOME environment variable)
endif

JAVA  := "$$JAVA_HOME/bin/java"
JAVAC := "$$JAVA_HOME/bin/javac"
JAVAH := "$$JAVA_HOME/bin/javah"

TARGET := target
OSINFO_CLASS := de.kherud.llama.OSInfo
OSINFO_PROG := $(TARGET)/classes/com/denkbares/clingo/OSInfo.class

## building OSInfo.java
ifeq ("$(wildcard $(OSINFO_PROG))","")
$(info Building OSInfo tool)
$(shell $(JAVAC) -cp src/main/java -d $(TARGET)/classes src/main/java/de/kherud/llama/OSInfo.java)
endif

ifndef OS_NAME
OS_NAME := $(shell $(JAVA) -cp $(TARGET)/classes $(OSINFO_CLASS) --os)
endif
ifndef OS_ARCH
OS_ARCH := $(shell $(JAVA) -cp $(TARGET)/classes $(OSINFO_CLASS) --arch)
endif

# Windows uses different path separators
ifeq ($(OS_NAME),Windows)
	sep := ;
else
	sep := :
endif

jclingo := jclingo-$(version)

ifdef JAVA_HOME
jni_h := $(shell find -L "$(JAVA_HOME)" -name jni.h)
ifneq ($(jni_h),)
jni_include := $(shell dirname "$(jni_h)")
endif

jni_md := $(shell find -L "$(JAVA_HOME)" -name jni_md.h)
ifneq ($(jni_md),)
jni_md_include := $(shell dirname "$(jni_md)")
endif
endif

known_targets := Linux-x86_64 Linux-arm Mac-x86_64 Mac-aarch64 Windows-x86_64 Windows-aarch64
target := $(OS_NAME)-$(OS_ARCH)

ifeq (,$(findstring $(strip $(target)),$(known_targets)))
  target := Default
endif

$(info Will build using target: $(target) (detected os: $(OS_NAME) arch: $(OS_ARCH)))

# cross-compilation toolchain prefix (e.g. "arm-linux-gnueabi-")
CROSS_PREFIX :=

# os=Default is meant to be generic unix/linux
Default_CC        := $(CROSS_PREFIX)g++
Default_STRIP     := $(CROSS_PREFIX)strip
Default_CCFLAGS   := -O3
Default_LINKFLAGS := -I$(JAVA_HOME)/include -shared -fPIC -fvisibility=hidden -lllama
Default_LLAMA_LIB_NAME   := libllama.so
Default_JLLAMA_LIB_NAME   := libjllama.so

Linux-x86_64_CC        := $(CROSS_PREFIX)g++
Linux-x86_64_STRIP     := $(CROSS_PREFIX)strip
Linux-x86_64_CCFLAGS   := -O3 -m64
Linux-x86_64_LINKFLAGS := $(Default_LINKFLAGS)
Linux-x86_64_LLAMA_LIB_NAME   := libllama.so
Linux-x86_64_JLLAMA_LIB_NAME   := libjllama.so

Linux-arm_CC          := $(CROSS_PREFIX)g++
Linux-arm_STRIP       := $(CROSS_PREFIX)strip
Linux-arm_CCFLAGS     := -O3 -mfloat-abi=soft
Linux-arm_LLAMA_LIB_NAME     := libllama.so
Linux-arm_JLLAMA_LIB_NAME     := libjllama.so

# Mac-x86_CCFLAGS    := -I$(JAVA_HOME)/include -O3 -fPIC -mmacosx-version-min=10.4 -fvisibility=hidden
Mac-x86_64_CC        := g++ -arch $(OS_ARCH)
Mac-x86_64_STRIP     := strip -x
MAC_SDK := /Developer/SDKs/MacOSX10.10.sdk
ifeq ($(wildcard MAC_SDK),)
	MAC_SDK := /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk
endif
Mac-x86_64_CCFLAGS    := -O3 -mmacosx-version-min=13.1
Mac-x86_64_LINKFLAGS := -I$(MAC_SDK)/System/Library/Frameworks/JavaVM.framework/Headers -dynamiclib -fPIC -fvisibility=hidden -lllama
Mac-x86_64_LLAMA_LIB_NAME   := libllama.dylib
Mac-x86_64_JLLAMA_LIB_NAME   := libjllama.dylib

# Mac-aarch64_CCFLAGS    := -I$(MAC_SDK)/System/Library/Frameworks/JavaVM.framework/Headers -O3 -fPIC -mmacosx-version-min=10.9 -fvisibility=hidden -Wno-implicit-function-declaration
# Use a CROSS_PREFIX as the cross-triple clang is not available in crossbuild, see https://github.com/multiarch/crossbuild/blob/ad79cc84b6fb3fb1d09bc4a78719ef26f23bab85/Dockerfile#L134
# When running on a M1 mac, CROSS_PREFIX will be empty, and 'make native' can still build
Mac-aarch64_CC        := $(CROSS_PREFIX)clang
Mac-aarch64_STRIP     := $(CROSS_PREFIX)strip -x
MAC_SDK := /usr/osxcross/SDK/MacOSX11.3.sdk
Mac-aarch64_CCFLAGS    := -O3 -mmacosx-version-min=13.1
Mac-aarch64_LINKFLAGS  := -I$(MAC_SDK)/System/Library/Frameworks/JavaVM.framework/Headers -dynamiclib -fPIC -fvisibility=hidden -lllama
Mac-aarch64_LLAMA_LIB_NAME    := libllama.dylib
Mac-aarch64_JLLAMA_LIB_NAME    := libjllama.dylib

Windows-x86_64_CC           := $(CROSS_PREFIX)g++
Windows-x86_64_STRIP        := $(CROSS_PREFIX)strip
Windows-x86_64_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -O3
Windows-x86_64_LINKFLAGS    := -Idocker/inc_win -shared -Wl,--kill-at -lllama
Windows-x86_64_LLAMA_LIB_NAME     := llama.dll
Windows-x86_64_JLLAMA_LIB_NAME      := jllama.dll

Windows-aarch64_CC           := $(CROSS_PREFIX)clang
Windows-aarch64_STRIP        := $(CROSS_PREFIX)strip
Windows-aarch64_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -O3
Windows-aarch64_LINKFLAGS    := -Idocker/inc_win -shared -Wl,--kill-at -lllama
Windows-aarch64_LLAMA_LIB_NAME      := llama.dll
Windows-aarch64_JLLAMA_LIB_NAME      := jllama.dll


CC        := $($(target)_CC)
STRIP     := $($(target)_STRIP)
CCFLAGS   := $($(target)_CCFLAGS)
LINKFLAGS := $($(target)_LINKFLAGS)
LLAMA_LIB_NAME   := $($(target)_LLAMA_LIB_NAME)
JLLAMA_LIB_NAME   := $($(target)_JLLAMA_LIB_NAME)
CCFLAGS := $(CCFLAGS)
ifneq ($(jni_include),)
CCFLAGS := $(CCFLAGS) -I"$(jni_include)"
endif
ifneq ($(jni_md_include),)
CCFLAGS := $(CCFLAGS) -I"$(jni_md_include)"
endif


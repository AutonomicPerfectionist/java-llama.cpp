package de.kherud.llama.foreign;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class llama_beam_view extends Structure {
	public IntByReference tokens;
	public IntByReference getTokens() {
		return tokens;
	}
	public void setTokens(IntByReference tokens) {
		this.tokens = tokens;
	}
	public NativeSize n_tokens;
	public NativeSize getN_tokens() {
		return n_tokens;
	}
	public void setN_tokens(NativeSize n_tokens) {
		this.n_tokens = n_tokens;
	}
	/** Cumulative beam probability (renormalized relative to all beams) */
	public float p;
	public float getP() {
		return p;
	}
	public void setP(float p) {
		this.p = p;
	}
	/** Callback should set this to true when a beam is at end-of-beam. */
	public byte eob;
	public byte getEob() {
		return eob;
	}
	public void setEob(byte eob) {
		this.eob = eob;
	}
	public llama_beam_view() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("tokens", "n_tokens", "p", "eob");
	}
	public llama_beam_view(IntByReference tokens, NativeSize n_tokens, float p, byte eob) {
		super();
		this.tokens = tokens;
		this.n_tokens = n_tokens;
		this.p = p;
		this.eob = eob;
	}
	public llama_beam_view(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends llama_beam_view implements Structure.ByReference {
		
	};
	public static class ByValue extends llama_beam_view implements Structure.ByValue {
		
	};
}

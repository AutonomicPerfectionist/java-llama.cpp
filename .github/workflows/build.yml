name: Build JNI bindings
on:
  workflow_dispatch:
  release:
    types: [created]
jobs:
  build:
    name: Build ${{ matrix.target.name }}-${{ matrix.target.arch }}
    runs-on: ${{ matrix.target.image }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - {
            name: Linux,
            arch: x86_64,
            image: ubuntu-latest,
            cmake: "-DCMAKE_CXX_FLAGS='-march=x86-64'"
          }
#          - {
#            name: Linux,
#            arch: aarch64,
#            image: ubuntu-latest,
#            cmake: "-DCMAKE_CXX_FLAGS='-march=armv8-a'"
#          }
          - {
            name: Mac,
            arch: x86_64,
            image: macos-latest,
            cmake: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
          }
          - {
            name: Mac,
            arch: aarch64,
            image: macos-latest,
            cmake: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          }
          - {
            name: Windows,
            arch: x86_64,
            image: windows-latest,
            cmake: "-DCMAKE_GENERATOR_PLATFORM=x64"
          }
#          - {
#            name: Windows,
#            arch: aarch64,
#            image: windows-latest,
#            cmake: "-DCMAKE_GENERATOR_PLATFORM=ARM64"
#          }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: "jni"
      - name: CMake (Windows)
        if: ${{ matrix.target.name == 'Windows' }}
        shell: cmd
        run: |
          cd scripts && .\build.bat ${{ matrix.target.cmake }} -DOS_NAME=${{ matrix.target.name }} -DOS_ARCH=${{ matrix.target.arch }}
      - name: CMake (Unix)
        if: ${{ matrix.target.name != 'Windows' }}
        shell: bash
        run: |
          cd scripts && ./build.sh ${{ matrix.target.cmake }} -DOS_NAME=${{ matrix.target.name }} -DOS_ARCH=${{ matrix.target.arch }}
      - name: Upload Unix Artifact
        if: ${{ matrix.target.name == 'Windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ github.workspace }}\src\main\resources\de\kherud\llama\
      - name: Upload Windows Artifact
        if: ${{ matrix.target.name != 'Windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ github.workspace }}/src/main/resources/de/kherud/llama/
  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: "jni"
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ${{ github.workspace }}/src/main/resources/de/kherud/llama/
#      - name: Set up Maven Central Repository
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'zulu'
#          server-id: ossrh
#          server-username: MAVEN_USERNAME
#          server-password: MAVEN_PASSWORD
#          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
#          gpg-passphrase: MAVEN_GPG_PASSPHRASE
#      - name: Publish package
#        run: mvn --batch-mode -P release deploy
#        env:
#          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

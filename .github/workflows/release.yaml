name: Build JNI bindings and publish to Maven Central
on:
  workflow_dispatch:
  release:
    types: [created]
jobs:
  build:
    name: Build ${{ matrix.target.name }}-${{ matrix.target.arch }}
    runs-on: ${{ matrix.target.image }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - {
            name: Linux,
            arch: x86_64,
            docker-arch: linux/amd64,
            docker-image: eclipse-temurin:11,
            image: ubuntu-latest,
            cmake: "-DCMAKE_CXX_FLAGS='-march=x86-64'"
          }
          - {
            # Sure do love the many ways to refer to ARM 64 bit
            # The platform passed to docker must be linux/arm64 to pull in the right image
            # But then we need aarch64 for the CMake invocation. Maybe we can switch CMake to using arm64?
            name: Linux,
            docker-arch: linux/arm64,
            docker-image: eclipse-temurin:11,
            arch: aarch64,
            image: ubuntu-latest,
            cmake: "-DCMAKE_CXX_FLAGS='-march=armv8-a'"
          }
          - {
            name: Mac,
            arch: x86_64,
            image: macos-latest,
            cmake: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
          }
          - {
            name: Mac,
            arch: aarch64,
            image: macos-latest,
            cmake: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          }
          - {
            name: Windows,
            arch: x86_64,
            image: windows-latest,
            cmake: "-DCMAKE_GENERATOR_PLATFORM=x64"
          }
    #          - {
    #            name: Windows,
    #            arch: aarch64,
    #            image: windows-latest,
    #            cmake: "-DCMAKE_GENERATOR_PLATFORM=ARM64"
    #          }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up QEMU
        if: ${{ matrix.target.name == 'Linux' }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.target.docker-arch }}
      - name: CMake (Windows)
        if: ${{ matrix.target.name == 'Windows' }}
        shell: cmd
        run: |
          cd scripts && .\build.bat ${{ matrix.target.cmake }} -DOS_NAME=${{ matrix.target.name }} -DOS_ARCH=${{ matrix.target.arch }}
      - name: CMake (Linux)
        if: ${{ matrix.target.name == 'Linux' }}
        run: |
          docker run \
            --rm \
            -v $(pwd):/${{ github.workspace }} \
            -w ${{ github.workspace }} \
            --platform ${{ matrix.target.docker-arch }} \
            ${{ matrix.target.docker-image }} \
            sh -c "apt-get update && apt-get install -y cmake openjdk-11-jdk git build-essential && cd scripts && ./build.sh ${{ matrix.target.cmake }} -DOS_NAME=${{ matrix.target.name }} -DOS_ARCH=${{ matrix.target.arch }}"
            # The above apt-get commands can be moved to a Dockerfile, but then
            # the image needs to be built for the docker-arch architecture,
            # which means using the docker/setup-buildx-action
      - name: CMake (Mac)
        if: ${{ matrix.target.name == 'Mac' }}
        shell: bash
        run: |
          cd scripts && ./build.sh ${{ matrix.target.cmake }} -DOS_NAME=${{ matrix.target.name }} -DOS_ARCH=${{ matrix.target.arch }}
      - name: Upload Windows Artifact
        if: ${{ matrix.target.name == 'Windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ github.workspace }}\src\main\resources\de\kherud\llama\
      - name: Upload Unix Artifact
        if: ${{ matrix.target.name != 'Windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ github.workspace }}/src/main/resources/de/kherud/llama/
  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ${{ github.workspace }}/src/main/resources/de/kherud/llama/
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Publish package
        run: mvn --batch-mode -P release deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
